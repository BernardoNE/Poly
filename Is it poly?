
/**
* This program will use dynamically allocated arrays to create and display a polynomial as well as
* display the polynomials derivative and second derivative. The program will be also be able to evaluate
* the function and the first and second derivative at a given number.
* @author Bernardo Espinoza
* <pre>
* Date: November 21, 2021
* File: PolyDifferentiatior.cpp
* Course: csc1253 Section 3 <br>
* Programming Project #: 4 <br>
* Instructor: Dr. Duncan <br>
* </pre>
*/

#include <iostream>
#include <sstream>
#include <cmath>
using namespace std;

/**
* Gives a string representation of this polynomial in standard
* eg: [6, 3, 0, -1, 0, 1, 1, 0] -> 3x^6 - x^4 + x^2 + x
* [5, -1, 0, 3, 0, -1, 1] -> -x^5 + 3x^3 - x + 1
* </pre>
*/
string ptos (const double poly[])
{
  stringstream sout;
  int deg = poly[0];
  if (deg == 0)
    {
      sout << poly[1];
    }
  else if (deg == 1)
    {
      if (poly[1] == 1)
	sout << "x";
      else if (poly[1] == -1)
	sout << "-x";
      else
	sout << poly[1] << "x";
      if (poly[2] != 0)
	{
	  if (poly[2] > 0)
	    {
	      sout << " + " << poly[2];
	    }
	  else
	    sout << " - " << -1 * poly[2];
	}
    }
  else
    {
      if (poly[1] == -1)
	sout << "-x^" << deg;
      else if (poly[1] == 1)
	sout << "x^" << deg;
      else
	sout << poly[1] << "x^" << deg;
      int power = deg - 1;
      for (int i = 2; i <= deg - 1; i++)
	{
	  if (poly[i] != 0)
	    {
	      if (poly[i] == 1)
		sout << " + x^" << power;
	      else if (poly[i] == -1)
		sout << " - x^" << power;
	      else if (poly[i] > 1)
		sout << " + " << poly[i] << "x^" << power;
	      else
		sout << " - " << -1 * poly[i] << "x^" << power;
	    }
	  power = power - 1;
	}
      if (poly[deg] != 0)
	{
	  if (poly[deg] == 1)
	    sout << " + x";
	  else if (poly[deg] == -1)
	    sout << " - x";
	  else if (poly[deg] > 1)
	    sout << " + " << poly[deg] << "x";
	  else
	    sout << " - " << -1 * poly[deg] << "x";
	}
      if (poly[deg + 1] != 0)
	{
	  if (poly[deg + 1] > 0)
	    sout << " + " << poly[deg + 1];
	  else
	    sout << " - " << -1 * poly[deg + 1];
	}
    }
  return sout.str ();
}

/*
* Evaluates the polynomial represented by the array at the
* specified value.
*/
double eval (const double poly[], double x)
{
  double sum;
  double n = poly[0];
  for (int i = 1; i <= n + 1; i++)
    {
      sum = sum * x + poly[i];
    }
  if (sum < 0.001 && sum > 0)
    sum = 0;
  return sum;
}

/**
* 
*/
double * differentiate (const double poly[])
{
  double *der;
  int power;
  int deg = poly[0];
  if (deg == 0)
    {
      double *der = new double[2];
      der[0] = 0;
      der[1] = 0;
      return der;
    }
  else
    {
      der = new double[deg + 1];
      power = deg;
      der[0] = deg - 1;

      for (int i = 1; i <= deg; i++)
	{
	  der[i] = power * poly[i];
	  power = power - 1;
	}
    }
  return der;
}

int main ()
{
  double x;
  int deg;
  cout << "Enter the degree of the polynomial -> ";
  cin >> deg;
  double *poly = new double[deg + 2];
  if (deg < 0)
    {
      cout << "Error: The degree of the polynomial must be nonnegative." <<
	endl;
      return 0;
    }
  else
    {
      double coeff;
      cout << "Enter the coefficients in the order of descending powers -> ";
      cin >> coeff;
      if (coeff == 0 && deg > 0)
	{
	  cout <<
	    "Error: Degree > 0 so the coefficient of the highest order term cannot be 0."
	    << endl;
	  return 0;
	}
      else
	{
	  poly[0] = deg;
	  poly[1] = coeff;
	  for (int i = 2; i <= deg + 1; i++)
	    {
	      cin >> poly[i];
	    }
	}
    }
  cout << "Enter x at which f(x), f'(x), and f''(x) will be evaluated -> ";
  cin >> x;
  cout << endl;

  double *f1Prime = differentiate (poly);
  double *f2Prime = differentiate (f1Prime);
  cout << "f(x) = " << ptos (poly) << endl;
  cout << "f(" << x << ") = " << eval (poly, x) << endl;
  cout << endl;

  cout << "f'(x) = " << ptos (f1Prime) << endl;
  cout << "f'(" << x << ") = " << eval (f1Prime, x) << endl;
  cout << endl;

  cout << "f''(x) = " << ptos (f2Prime) << endl;
  cout << "f''(" << x << ") = " << eval (f2Prime, x) << endl;
  cout << endl;
  return 0;
}

